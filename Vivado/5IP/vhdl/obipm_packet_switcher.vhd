-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obipm_packet_switcher is
port (
    data_b_in : IN STD_LOGIC_VECTOR (15 downto 0);
    data_b_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_b_out_ap_vld : OUT STD_LOGIC;
    address_b : OUT STD_LOGIC_VECTOR (5 downto 0);
    address_b_ap_vld : OUT STD_LOGIC;
    w_enable_b : OUT STD_LOGIC_VECTOR (0 downto 0);
    w_enable_b_ap_vld : OUT STD_LOGIC;
    r_enable_b : OUT STD_LOGIC_VECTOR (0 downto 0);
    r_enable_b_ap_vld : OUT STD_LOGIC;
    generic_enable_b : OUT STD_LOGIC_VECTOR (0 downto 0);
    generic_enable_b_ap_vld : OUT STD_LOGIC;
    data_ip_in : IN STD_LOGIC_VECTOR (79 downto 0);
    data_ip_out : OUT STD_LOGIC_VECTOR (79 downto 0);
    data_ip_out_ap_vld : OUT STD_LOGIC;
    address_ip : IN STD_LOGIC_VECTOR (29 downto 0);
    w_enable_ip : IN STD_LOGIC_VECTOR (4 downto 0);
    r_enable_ip : IN STD_LOGIC_VECTOR (4 downto 0);
    generic_enable_ip : IN STD_LOGIC_VECTOR (4 downto 0);
    transaction_r : IN STD_LOGIC_VECTOR (0 downto 0);
    index_ip : IN STD_LOGIC_VECTOR (2 downto 0);
    interrupt_internal : IN STD_LOGIC_VECTOR (0 downto 0);
    index_interrupt : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of obipm_packet_switcher is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv80_FFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (79 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7A : STD_LOGIC_VECTOR (6 downto 0) := "1111010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";

    signal val_V_read_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_V_4_read_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_521_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal v_V_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v_V_1_fu_610_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal v_V_2_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_V_3_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_V_4_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Lo_assign_fu_312_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_354_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_332_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_4_fu_348_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_360_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_384_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_368_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_10_fu_390_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_11_fu_394_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_12_fu_398_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_13_fu_404_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_s_fu_410_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_16_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_431_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_437_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_453_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_445_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_461_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loc_V_fu_421_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_22_fu_467_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_25_fu_479_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_26_fu_485_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_23_fu_471_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_24_fu_475_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_28_fu_503_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_29_fu_509_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_27_fu_495_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_demorgan_fu_515_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_shl_fu_528_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_fu_540_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_548_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_1_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_564_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_568_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_34_fu_578_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_fu_592_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_584_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_fu_600_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_38_fu_604_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Hi_assign_2_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);


begin



    Hi_assign_2_fu_308_p1 <= std_logic_vector(resize(unsigned(index_ip),32));
    Hi_assign_fu_320_p2 <= (Lo_assign_fu_312_p3 or ap_const_lv7_F);
    Lo_assign_1_fu_552_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_536_p1) - unsigned(p_shl1_cast_fu_548_p1));
    Lo_assign_fu_312_p3 <= (index_ip & ap_const_lv4_0);

    address_b_assign_proc : process(val_V_read_fu_294_p2, v_V_1_fu_610_p1)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            address_b <= v_V_1_fu_610_p1;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            address_b <= ap_const_lv6_0;
        else 
            address_b <= "XXXXXX";
        end if; 
    end process;

    address_b_ap_vld <= ap_const_logic_1;

    data_b_out_assign_proc : process(val_V_read_fu_294_p2, v_V_fu_416_p1)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            data_b_out <= v_V_fu_416_p1;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            data_b_out <= ap_const_lv16_0;
        else 
            data_b_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    data_b_out_ap_vld <= ap_const_logic_1;

    data_ip_out_assign_proc : process(val_V_read_fu_294_p2, p_Result_1_fu_521_p2)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            data_ip_out <= p_Result_1_fu_521_p2;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            data_ip_out <= ap_const_lv80_0;
        else 
            data_ip_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    data_ip_out_ap_vld <= ap_const_logic_1;

    generic_enable_b_assign_proc : process(val_V_read_fu_294_p2, val_V_4_read_fu_300_p2, v_V_4_fu_633_p3)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            generic_enable_b <= v_V_4_fu_633_p3;
        elsif (((val_V_read_fu_294_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = val_V_4_read_fu_300_p2)))) then 
            generic_enable_b <= ap_const_lv1_1;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            generic_enable_b <= ap_const_lv1_0;
        else 
            generic_enable_b <= "X";
        end if; 
    end process;

    generic_enable_b_ap_vld <= ap_const_logic_1;
    loc_V_fu_421_p1 <= std_logic_vector(resize(unsigned(data_b_in),80));
    p_Result_1_fu_521_p2 <= (tmp_27_fu_495_p3 and p_demorgan_fu_515_p2);
    p_Result_s_fu_410_p2 <= (tmp_12_fu_398_p2 and tmp_13_fu_404_p2);
    p_demorgan_fu_515_p2 <= (tmp_28_fu_503_p2 and tmp_29_fu_509_p2);
    p_shl1_cast_fu_548_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_540_p3),7));
    p_shl1_fu_540_p3 <= (index_ip & ap_const_lv1_0);
    p_shl_cast_fu_536_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_528_p3),7));
    p_shl_fu_528_p3 <= (index_ip & ap_const_lv3_0);

    r_enable_b_assign_proc : process(val_V_read_fu_294_p2, v_V_3_fu_624_p3)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            r_enable_b <= v_V_3_fu_624_p3;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            r_enable_b <= ap_const_lv1_0;
        else 
            r_enable_b <= "X";
        end if; 
    end process;

    r_enable_b_ap_vld <= ap_const_logic_1;
    tmp_10_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_376_p3),80));
    tmp_11_fu_394_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_384_p2),80));
    tmp_12_fu_398_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_fu_368_p3),to_integer(unsigned('0' & tmp_10_fu_390_p1(31-1 downto 0)))));
    tmp_13_fu_404_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv80_FFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_11_fu_394_p1(31-1 downto 0)))));
    tmp_16_fu_425_p2 <= "1" when (unsigned(Lo_assign_fu_312_p3) > unsigned(Hi_assign_fu_320_p2)) else "0";
    tmp_17_fu_431_p2 <= std_logic_vector(signed(ap_const_lv7_4F) - signed(Lo_assign_fu_312_p3));
    tmp_18_fu_437_p3 <= 
        Lo_assign_fu_312_p3 when (tmp_16_fu_425_p2(0) = '1') else 
        Hi_assign_fu_320_p2;
    tmp_19_fu_445_p3 <= 
        Hi_assign_fu_320_p2 when (tmp_16_fu_425_p2(0) = '1') else 
        Lo_assign_fu_312_p3;
    tmp_1_fu_326_p2 <= "1" when (unsigned(Lo_assign_fu_312_p3) > unsigned(Hi_assign_fu_320_p2)) else "0";
    tmp_20_fu_453_p3 <= 
        tmp_17_fu_431_p2 when (tmp_16_fu_425_p2(0) = '1') else 
        Lo_assign_fu_312_p3;
    tmp_21_fu_461_p2 <= std_logic_vector(signed(ap_const_lv7_4F) - signed(tmp_18_fu_437_p3));
    tmp_22_fu_467_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_453_p3),80));
    tmp_23_fu_471_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_445_p3),80));
    tmp_24_fu_475_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_461_p2),80));
    tmp_25_fu_479_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_421_p1),to_integer(unsigned('0' & tmp_22_fu_467_p1(31-1 downto 0)))));
    
    tmp_26_fu_485_p4_proc : process(tmp_25_fu_479_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(80+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(80+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable tmp_26_fu_485_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(80 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_4F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_25_fu_479_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(80-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(80-1-unsigned(ap_const_lv32_4F(7-1 downto 0)));
            for tmp_26_fu_485_p4_i in 0 to 80-1 loop
                v0_cpy(tmp_26_fu_485_p4_i) := tmp_25_fu_479_p2(80-1-tmp_26_fu_485_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(80-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_26_fu_485_p4 <= resvalue(80-1 downto 0);
    end process;

    tmp_27_fu_495_p3 <= 
        tmp_26_fu_485_p4 when (tmp_16_fu_425_p2(0) = '1') else 
        tmp_25_fu_479_p2;
    tmp_28_fu_503_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv80_FFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_23_fu_471_p1(31-1 downto 0)))));
    tmp_29_fu_509_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv80_FFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_24_fu_475_p1(31-1 downto 0)))));
    
    tmp_2_fu_332_p4_proc : process(data_ip_in)
    variable vlo_cpy : STD_LOGIC_VECTOR(80+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(80+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable tmp_2_fu_332_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(80 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(80 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_4F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := data_ip_in;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(80-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(80-1-unsigned(ap_const_lv32_4F(7-1 downto 0)));
            for tmp_2_fu_332_p4_i in 0 to 80-1 loop
                v0_cpy(tmp_2_fu_332_p4_i) := data_ip_in(80-1-tmp_2_fu_332_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(80-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_332_p4 <= resvalue(80-1 downto 0);
    end process;

    tmp_31_fu_558_p2 <= "1" when (unsigned(Lo_assign_1_fu_552_p2) > unsigned(ap_const_lv7_7A)) else "0";
    tmp_32_fu_564_p1 <= Lo_assign_1_fu_552_p2(5 - 1 downto 0);
    
    tmp_33_fu_568_p4_proc : process(address_ip)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_33_fu_568_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := address_ip;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for tmp_33_fu_568_p4_i in 0 to 30-1 loop
                v0_cpy(tmp_33_fu_568_p4_i) := address_ip(30-1-tmp_33_fu_568_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_33_fu_568_p4 <= resvalue(30-1 downto 0);
    end process;

    tmp_34_fu_578_p2 <= std_logic_vector(signed(ap_const_lv5_1D) - signed(tmp_32_fu_564_p1));
    tmp_35_fu_584_p3 <= 
        tmp_33_fu_568_p4 when (tmp_31_fu_558_p2(0) = '1') else 
        address_ip;
    tmp_36_fu_592_p3 <= 
        tmp_34_fu_578_p2 when (tmp_31_fu_558_p2(0) = '1') else 
        tmp_32_fu_564_p1;
    tmp_37_fu_600_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_592_p3),30));
    tmp_38_fu_604_p2 <= std_logic_vector(shift_right(unsigned(tmp_35_fu_584_p3),to_integer(unsigned('0' & tmp_37_fu_600_p1(30-1 downto 0)))));
    tmp_3_fu_342_p2 <= std_logic_vector(unsigned(Lo_assign_fu_312_p3) - unsigned(Hi_assign_fu_320_p2));
    tmp_4_fu_348_p2 <= std_logic_vector(signed(ap_const_lv7_4F) - signed(Lo_assign_fu_312_p3));
    tmp_5_fu_354_p2 <= std_logic_vector(unsigned(Hi_assign_fu_320_p2) - unsigned(Lo_assign_fu_312_p3));
    tmp_6_fu_360_p3 <= 
        tmp_3_fu_342_p2 when (tmp_1_fu_326_p2(0) = '1') else 
        tmp_5_fu_354_p2;
    tmp_7_fu_368_p3 <= 
        tmp_2_fu_332_p4 when (tmp_1_fu_326_p2(0) = '1') else 
        data_ip_in;
    tmp_8_fu_376_p3 <= 
        tmp_4_fu_348_p2 when (tmp_1_fu_326_p2(0) = '1') else 
        Lo_assign_fu_312_p3;
    tmp_9_fu_384_p2 <= std_logic_vector(signed(ap_const_lv7_4F) - signed(tmp_6_fu_360_p3));
    v_V_1_fu_610_p1 <= tmp_38_fu_604_p2(6 - 1 downto 0);
    v_V_2_fu_615_p3 <= w_enable_ip(to_integer(unsigned(Hi_assign_2_fu_308_p1)) downto to_integer(unsigned(Hi_assign_2_fu_308_p1))) when (to_integer(unsigned(Hi_assign_2_fu_308_p1))>= 0 and to_integer(unsigned(Hi_assign_2_fu_308_p1))<=4) else "-";
    v_V_3_fu_624_p3 <= r_enable_ip(to_integer(unsigned(Hi_assign_2_fu_308_p1)) downto to_integer(unsigned(Hi_assign_2_fu_308_p1))) when (to_integer(unsigned(Hi_assign_2_fu_308_p1))>= 0 and to_integer(unsigned(Hi_assign_2_fu_308_p1))<=4) else "-";
    v_V_4_fu_633_p3 <= generic_enable_ip(to_integer(unsigned(Hi_assign_2_fu_308_p1)) downto to_integer(unsigned(Hi_assign_2_fu_308_p1))) when (to_integer(unsigned(Hi_assign_2_fu_308_p1))>= 0 and to_integer(unsigned(Hi_assign_2_fu_308_p1))<=4) else "-";
    v_V_fu_416_p1 <= p_Result_s_fu_410_p2(16 - 1 downto 0);
    val_V_4_read_fu_300_p2 <= interrupt_internal;
    val_V_read_fu_294_p2 <= transaction_r;

    w_enable_b_assign_proc : process(val_V_read_fu_294_p2, val_V_4_read_fu_300_p2, v_V_2_fu_615_p3)
    begin
        if (not((val_V_read_fu_294_p2 = ap_const_lv1_0))) then 
            w_enable_b <= v_V_2_fu_615_p3;
        elsif (((val_V_read_fu_294_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = val_V_4_read_fu_300_p2)))) then 
            w_enable_b <= ap_const_lv1_1;
        elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
            w_enable_b <= ap_const_lv1_0;
        else 
            w_enable_b <= "X";
        end if; 
    end process;

    w_enable_b_ap_vld <= ap_const_logic_1;
end behav;
