-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obipm_enabler is
port (
    row_0_b : IN STD_LOGIC_VECTOR (15 downto 0);
    enable_ip : OUT STD_LOGIC_VECTOR (4 downto 0);
    enable_ip_ap_vld : OUT STD_LOGIC;
    transaction_r : OUT STD_LOGIC_VECTOR (0 downto 0);
    transaction_r_ap_vld : OUT STD_LOGIC;
    index_ip : OUT STD_LOGIC_VECTOR (2 downto 0);
    index_ip_ap_vld : OUT STD_LOGIC;
    ack_internal : OUT STD_LOGIC_VECTOR (4 downto 0);
    ack_internal_ap_vld : OUT STD_LOGIC );
end;


architecture behav of obipm_enabler is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal v_V_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal target_ip_V_fu_198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_fu_218_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_194_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Hi_assign_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);


begin



    Hi_assign_fu_214_p1 <= std_logic_vector(resize(unsigned(target_ip_V_fu_198_p2),32));

    ack_internal_assign_proc : process(v_V_fu_205_p3, p_Result_s_fu_218_p4, tmp_45_fu_230_p3)
    begin
        if ((not((v_V_fu_205_p3 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_45_fu_230_p3)))) then 
            ack_internal <= p_Result_s_fu_218_p4;
        elsif (((v_V_fu_205_p3 = ap_const_lv1_0) or (not((v_V_fu_205_p3 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_45_fu_230_p3)))) then 
            ack_internal <= ap_const_lv5_0;
        else 
            ack_internal <= "XXXXX";
        end if; 
    end process;


    ack_internal_ap_vld_assign_proc : process(v_V_fu_205_p3, tmp_45_fu_230_p3)
    begin
        if (((v_V_fu_205_p3 = ap_const_lv1_0) or (not((v_V_fu_205_p3 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_45_fu_230_p3)) or (not((v_V_fu_205_p3 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_45_fu_230_p3))))) then 
            ack_internal_ap_vld <= ap_const_logic_1;
        else 
            ack_internal_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    enable_ip_assign_proc : process(v_V_fu_205_p3, p_Result_s_fu_218_p4)
    begin
        if (not((v_V_fu_205_p3 = ap_const_lv1_0))) then 
            enable_ip <= p_Result_s_fu_218_p4;
        elsif ((v_V_fu_205_p3 = ap_const_lv1_0)) then 
            enable_ip <= ap_const_lv5_0;
        else 
            enable_ip <= "XXXXX";
        end if; 
    end process;


    enable_ip_ap_vld_assign_proc : process(v_V_fu_205_p3)
    begin
        if (((v_V_fu_205_p3 = ap_const_lv1_0) or not((v_V_fu_205_p3 = ap_const_lv1_0)))) then 
            enable_ip_ap_vld <= ap_const_logic_1;
        else 
            enable_ip_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    index_ip <= target_ip_V_fu_198_p2;
    index_ip_ap_vld <= ap_const_logic_1;
    
    p_Result_s_fu_218_p4_proc : process(Hi_assign_fu_214_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_218_p4 <= ap_const_lv5_0;
        if to_integer(unsigned(Hi_assign_fu_214_p1)) >= ap_const_lv5_0'low and to_integer(unsigned(Hi_assign_fu_214_p1)) <= ap_const_lv5_0'high then
            result(0) := '0';
            for i in ap_const_lv5_11'range loop
                result(0) := result(0) or ap_const_lv5_11(i);
            end loop;
            p_Result_s_fu_218_p4(to_integer(unsigned(Hi_assign_fu_214_p1))) <= result(0);
        end if;
    end process;

    target_ip_V_fu_198_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(tmp_fu_194_p1));
    tmp_45_fu_230_p3 <= row_0_b(13 downto 13);
    tmp_fu_194_p1 <= row_0_b(3 - 1 downto 0);
    transaction_r <= row_0_b(12 downto 12);
    transaction_r_ap_vld <= ap_const_logic_1;
    v_V_fu_205_p3 <= row_0_b(12 downto 12);
end behav;
