// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "obipm_enabler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool obipm_enabler::ap_const_boolean_1 = true;
const sc_logic obipm_enabler::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic obipm_enabler::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<5> obipm_enabler::ap_const_lv5_0 = "00000";
const sc_lv<1> obipm_enabler::ap_const_lv1_0 = "0";
const sc_lv<3> obipm_enabler::ap_const_lv3_7 = "111";
const sc_lv<32> obipm_enabler::ap_const_lv32_C = "1100";
const sc_lv<5> obipm_enabler::ap_const_lv5_11 = "10001";
const sc_lv<32> obipm_enabler::ap_const_lv32_D = "1101";

obipm_enabler::obipm_enabler(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_Hi_assign_fu_214_p1);
    sensitive << ( target_ip_V_fu_198_p2 );

    SC_METHOD(thread_ack_internal);
    sensitive << ( v_V_fu_205_p3 );
    sensitive << ( p_Result_s_fu_218_p4 );
    sensitive << ( tmp_45_fu_230_p3 );

    SC_METHOD(thread_ack_internal_ap_vld);
    sensitive << ( v_V_fu_205_p3 );
    sensitive << ( tmp_45_fu_230_p3 );

    SC_METHOD(thread_enable_ip);
    sensitive << ( v_V_fu_205_p3 );
    sensitive << ( p_Result_s_fu_218_p4 );

    SC_METHOD(thread_enable_ip_ap_vld);
    sensitive << ( v_V_fu_205_p3 );

    SC_METHOD(thread_index_ip);
    sensitive << ( target_ip_V_fu_198_p2 );

    SC_METHOD(thread_index_ip_ap_vld);

    SC_METHOD(thread_p_Result_s_fu_218_p4);
    sensitive << ( Hi_assign_fu_214_p1 );

    SC_METHOD(thread_target_ip_V_fu_198_p2);
    sensitive << ( tmp_fu_194_p1 );

    SC_METHOD(thread_tmp_45_fu_230_p3);
    sensitive << ( row_0_b );

    SC_METHOD(thread_tmp_fu_194_p1);
    sensitive << ( row_0_b );

    SC_METHOD(thread_transaction_r);
    sensitive << ( row_0_b );

    SC_METHOD(thread_transaction_r_ap_vld);

    SC_METHOD(thread_v_V_fu_205_p3);
    sensitive << ( row_0_b );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "obipm_enabler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, row_0_b, "(port)row_0_b");
    sc_trace(mVcdFile, enable_ip, "(port)enable_ip");
    sc_trace(mVcdFile, enable_ip_ap_vld, "(port)enable_ip_ap_vld");
    sc_trace(mVcdFile, transaction_r, "(port)transaction_r");
    sc_trace(mVcdFile, transaction_r_ap_vld, "(port)transaction_r_ap_vld");
    sc_trace(mVcdFile, index_ip, "(port)index_ip");
    sc_trace(mVcdFile, index_ip_ap_vld, "(port)index_ip_ap_vld");
    sc_trace(mVcdFile, ack_internal, "(port)ack_internal");
    sc_trace(mVcdFile, ack_internal_ap_vld, "(port)ack_internal_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, v_V_fu_205_p3, "v_V_fu_205_p3");
    sc_trace(mVcdFile, target_ip_V_fu_198_p2, "target_ip_V_fu_198_p2");
    sc_trace(mVcdFile, p_Result_s_fu_218_p4, "p_Result_s_fu_218_p4");
    sc_trace(mVcdFile, tmp_45_fu_230_p3, "tmp_45_fu_230_p3");
    sc_trace(mVcdFile, tmp_fu_194_p1, "tmp_fu_194_p1");
    sc_trace(mVcdFile, Hi_assign_fu_214_p1, "Hi_assign_fu_214_p1");
#endif

    }
}

obipm_enabler::~obipm_enabler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void obipm_enabler::thread_Hi_assign_fu_214_p1() {
    Hi_assign_fu_214_p1 = esl_zext<32,3>(target_ip_V_fu_198_p2.read());
}

void obipm_enabler::thread_ack_internal() {
    if ((!esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_45_fu_230_p3.read()))) {
        ack_internal = p_Result_s_fu_218_p4.read();
    } else if ((esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) || 
                (!esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_45_fu_230_p3.read())))) {
        ack_internal = ap_const_lv5_0;
    } else {
        ack_internal = "XXXXX";
    }
}

void obipm_enabler::thread_ack_internal_ap_vld() {
    if ((esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) || 
         (!esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_45_fu_230_p3.read())) || 
         (!esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_45_fu_230_p3.read())))) {
        ack_internal_ap_vld = ap_const_logic_1;
    } else {
        ack_internal_ap_vld = ap_const_logic_0;
    }
}

void obipm_enabler::thread_enable_ip() {
    if (!esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0)) {
        enable_ip = p_Result_s_fu_218_p4.read();
    } else if (esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0)) {
        enable_ip = ap_const_lv5_0;
    } else {
        enable_ip = "XXXXX";
    }
}

void obipm_enabler::thread_enable_ip_ap_vld() {
    if ((esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0) || 
         !esl_seteq<1,1,1>(v_V_fu_205_p3.read(), ap_const_lv1_0))) {
        enable_ip_ap_vld = ap_const_logic_1;
    } else {
        enable_ip_ap_vld = ap_const_logic_0;
    }
}

void obipm_enabler::thread_index_ip() {
    index_ip = target_ip_V_fu_198_p2.read();
}

void obipm_enabler::thread_index_ip_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        index_ip_ap_vld = ap_const_logic_1;
    } else {
        index_ip_ap_vld = ap_const_logic_0;
    }
}

void obipm_enabler::thread_p_Result_s_fu_218_p4() {
    p_Result_s_fu_218_p4 = esl_bitset<5,5,32,5>(ap_const_lv5_0, Hi_assign_fu_214_p1.read(), ap_const_lv5_11);
}

void obipm_enabler::thread_target_ip_V_fu_198_p2() {
    target_ip_V_fu_198_p2 = (!ap_const_lv3_7.is_01() || !tmp_fu_194_p1.read().is_01())? sc_lv<3>(): (sc_bigint<3>(ap_const_lv3_7) + sc_biguint<3>(tmp_fu_194_p1.read()));
}

void obipm_enabler::thread_tmp_45_fu_230_p3() {
    tmp_45_fu_230_p3 = row_0_b.read().range(13, 13);
}

void obipm_enabler::thread_tmp_fu_194_p1() {
    tmp_fu_194_p1 = row_0_b.read().range(3-1, 0);
}

void obipm_enabler::thread_transaction_r() {
    transaction_r = row_0_b.read().range(12, 12);
}

void obipm_enabler::thread_transaction_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        transaction_r_ap_vld = ap_const_logic_1;
    } else {
        transaction_r_ap_vld = ap_const_logic_0;
    }
}

void obipm_enabler::thread_v_V_fu_205_p3() {
    v_V_fu_205_p3 = row_0_b.read().range(12, 12);
}

}

