// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _obipm_packet_switcher_HH_
#define _obipm_packet_switcher_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct obipm_packet_switcher : public sc_module {
    // Port declarations 22
    sc_in< sc_lv<16> > data_b_in;
    sc_out< sc_lv<16> > data_b_out;
    sc_out< sc_logic > data_b_out_ap_vld;
    sc_out< sc_lv<6> > address_b;
    sc_out< sc_logic > address_b_ap_vld;
    sc_out< sc_lv<1> > w_enable_b;
    sc_out< sc_logic > w_enable_b_ap_vld;
    sc_out< sc_lv<1> > r_enable_b;
    sc_out< sc_logic > r_enable_b_ap_vld;
    sc_out< sc_lv<1> > generic_enable_b;
    sc_out< sc_logic > generic_enable_b_ap_vld;
    sc_in< sc_lv<80> > data_ip_in;
    sc_out< sc_lv<80> > data_ip_out;
    sc_out< sc_logic > data_ip_out_ap_vld;
    sc_in< sc_lv<30> > address_ip;
    sc_in< sc_lv<5> > w_enable_ip;
    sc_in< sc_lv<5> > r_enable_ip;
    sc_in< sc_lv<5> > generic_enable_ip;
    sc_in< sc_lv<1> > transaction_r;
    sc_in< sc_lv<3> > index_ip;
    sc_in< sc_lv<1> > interrupt_internal;
    sc_in< sc_lv<32> > index_interrupt;


    // Module declarations
    obipm_packet_switcher(sc_module_name name);
    SC_HAS_PROCESS(obipm_packet_switcher);

    ~obipm_packet_switcher();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > val_V_read_fu_294_p2;
    sc_signal< sc_lv<1> > val_V_4_read_fu_300_p2;
    sc_signal< sc_lv<80> > p_Result_1_fu_521_p2;
    sc_signal< sc_lv<16> > v_V_fu_416_p1;
    sc_signal< sc_lv<6> > v_V_1_fu_610_p1;
    sc_signal< sc_lv<1> > v_V_2_fu_615_p3;
    sc_signal< sc_lv<1> > v_V_3_fu_624_p3;
    sc_signal< sc_lv<1> > v_V_4_fu_633_p3;
    sc_signal< sc_lv<7> > Lo_assign_fu_312_p3;
    sc_signal< sc_lv<7> > Hi_assign_fu_320_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_326_p2;
    sc_signal< sc_lv<7> > tmp_3_fu_342_p2;
    sc_signal< sc_lv<7> > tmp_5_fu_354_p2;
    sc_signal< sc_lv<80> > tmp_2_fu_332_p4;
    sc_signal< sc_lv<7> > tmp_4_fu_348_p2;
    sc_signal< sc_lv<7> > tmp_6_fu_360_p3;
    sc_signal< sc_lv<7> > tmp_8_fu_376_p3;
    sc_signal< sc_lv<7> > tmp_9_fu_384_p2;
    sc_signal< sc_lv<80> > tmp_7_fu_368_p3;
    sc_signal< sc_lv<80> > tmp_10_fu_390_p1;
    sc_signal< sc_lv<80> > tmp_11_fu_394_p1;
    sc_signal< sc_lv<80> > tmp_12_fu_398_p2;
    sc_signal< sc_lv<80> > tmp_13_fu_404_p2;
    sc_signal< sc_lv<80> > p_Result_s_fu_410_p2;
    sc_signal< sc_lv<1> > tmp_16_fu_425_p2;
    sc_signal< sc_lv<7> > tmp_17_fu_431_p2;
    sc_signal< sc_lv<7> > tmp_18_fu_437_p3;
    sc_signal< sc_lv<7> > tmp_20_fu_453_p3;
    sc_signal< sc_lv<7> > tmp_19_fu_445_p3;
    sc_signal< sc_lv<7> > tmp_21_fu_461_p2;
    sc_signal< sc_lv<80> > loc_V_fu_421_p1;
    sc_signal< sc_lv<80> > tmp_22_fu_467_p1;
    sc_signal< sc_lv<80> > tmp_25_fu_479_p2;
    sc_signal< sc_lv<80> > tmp_26_fu_485_p4;
    sc_signal< sc_lv<80> > tmp_23_fu_471_p1;
    sc_signal< sc_lv<80> > tmp_24_fu_475_p1;
    sc_signal< sc_lv<80> > tmp_28_fu_503_p2;
    sc_signal< sc_lv<80> > tmp_29_fu_509_p2;
    sc_signal< sc_lv<80> > tmp_27_fu_495_p3;
    sc_signal< sc_lv<80> > p_demorgan_fu_515_p2;
    sc_signal< sc_lv<6> > p_shl_fu_528_p3;
    sc_signal< sc_lv<4> > p_shl1_fu_540_p3;
    sc_signal< sc_lv<7> > p_shl_cast_fu_536_p1;
    sc_signal< sc_lv<7> > p_shl1_cast_fu_548_p1;
    sc_signal< sc_lv<7> > Lo_assign_1_fu_552_p2;
    sc_signal< sc_lv<5> > tmp_32_fu_564_p1;
    sc_signal< sc_lv<1> > tmp_31_fu_558_p2;
    sc_signal< sc_lv<30> > tmp_33_fu_568_p4;
    sc_signal< sc_lv<5> > tmp_34_fu_578_p2;
    sc_signal< sc_lv<5> > tmp_36_fu_592_p3;
    sc_signal< sc_lv<30> > tmp_35_fu_584_p3;
    sc_signal< sc_lv<30> > tmp_37_fu_600_p1;
    sc_signal< sc_lv<30> > tmp_38_fu_604_p2;
    sc_signal< sc_lv<32> > Hi_assign_2_fu_308_p1;
    static const bool ap_const_boolean_1;
    static const sc_lv<80> ap_const_lv80_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_F;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<7> ap_const_lv7_4F;
    static const sc_lv<80> ap_const_lv80_FFFFFFFFFFFFFFFFFFFF;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<7> ap_const_lv7_7A;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<5> ap_const_lv5_1D;
    // Thread declarations
    void thread_Hi_assign_2_fu_308_p1();
    void thread_Hi_assign_fu_320_p2();
    void thread_Lo_assign_1_fu_552_p2();
    void thread_Lo_assign_fu_312_p3();
    void thread_address_b();
    void thread_address_b_ap_vld();
    void thread_data_b_out();
    void thread_data_b_out_ap_vld();
    void thread_data_ip_out();
    void thread_data_ip_out_ap_vld();
    void thread_generic_enable_b();
    void thread_generic_enable_b_ap_vld();
    void thread_loc_V_fu_421_p1();
    void thread_p_Result_1_fu_521_p2();
    void thread_p_Result_s_fu_410_p2();
    void thread_p_demorgan_fu_515_p2();
    void thread_p_shl1_cast_fu_548_p1();
    void thread_p_shl1_fu_540_p3();
    void thread_p_shl_cast_fu_536_p1();
    void thread_p_shl_fu_528_p3();
    void thread_r_enable_b();
    void thread_r_enable_b_ap_vld();
    void thread_tmp_10_fu_390_p1();
    void thread_tmp_11_fu_394_p1();
    void thread_tmp_12_fu_398_p2();
    void thread_tmp_13_fu_404_p2();
    void thread_tmp_16_fu_425_p2();
    void thread_tmp_17_fu_431_p2();
    void thread_tmp_18_fu_437_p3();
    void thread_tmp_19_fu_445_p3();
    void thread_tmp_1_fu_326_p2();
    void thread_tmp_20_fu_453_p3();
    void thread_tmp_21_fu_461_p2();
    void thread_tmp_22_fu_467_p1();
    void thread_tmp_23_fu_471_p1();
    void thread_tmp_24_fu_475_p1();
    void thread_tmp_25_fu_479_p2();
    void thread_tmp_26_fu_485_p4();
    void thread_tmp_27_fu_495_p3();
    void thread_tmp_28_fu_503_p2();
    void thread_tmp_29_fu_509_p2();
    void thread_tmp_2_fu_332_p4();
    void thread_tmp_31_fu_558_p2();
    void thread_tmp_32_fu_564_p1();
    void thread_tmp_33_fu_568_p4();
    void thread_tmp_34_fu_578_p2();
    void thread_tmp_35_fu_584_p3();
    void thread_tmp_36_fu_592_p3();
    void thread_tmp_37_fu_600_p1();
    void thread_tmp_38_fu_604_p2();
    void thread_tmp_3_fu_342_p2();
    void thread_tmp_4_fu_348_p2();
    void thread_tmp_5_fu_354_p2();
    void thread_tmp_6_fu_360_p3();
    void thread_tmp_7_fu_368_p3();
    void thread_tmp_8_fu_376_p3();
    void thread_tmp_9_fu_384_p2();
    void thread_v_V_1_fu_610_p1();
    void thread_v_V_2_fu_615_p3();
    void thread_v_V_3_fu_624_p3();
    void thread_v_V_4_fu_633_p3();
    void thread_v_V_fu_416_p1();
    void thread_val_V_4_read_fu_300_p2();
    void thread_val_V_read_fu_294_p2();
    void thread_w_enable_b();
    void thread_w_enable_b_ap_vld();
};

}

using namespace ap_rtl;

#endif
