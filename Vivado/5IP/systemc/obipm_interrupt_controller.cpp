// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "obipm_interrupt_controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<2> obipm_interrupt_controller::ap_ST_fsm_state2 = "10";
const bool obipm_interrupt_controller::ap_const_boolean_0 = false;
const sc_logic obipm_interrupt_controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic obipm_interrupt_controller::ap_const_logic_0 = sc_dt::Log_0;

obipm_interrupt_controller::obipm_interrupt_controller(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "10";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "obipm_interrupt_controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, interrupt_ip, "(port)interrupt_ip");
    sc_trace(mVcdFile, transaction_r, "(port)transaction_r");
    sc_trace(mVcdFile, irq, "(port)irq");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

obipm_interrupt_controller::~obipm_interrupt_controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void obipm_interrupt_controller::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void obipm_interrupt_controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state2;
break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

